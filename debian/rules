#!/usr/bin/make -f

# debian/rules file for the ACE Debian GNU/Linux package
# written February 2002 by Ossama Othman <ossama@debian.org>
# Modified August 2003 by Brian Nelson <pyro@debian.org>
# Copyrigh (C) 2004  Raphael Bossek <bossekr@debian.org>

INSTALL = install

ACE_SUBDIR = ACE_wrappers
ACE_ARCHIVE = $(shell ls -1 ACE+TAO+CIAO*.tar.gz 2>/dev/null || echo ace-archive-missing)
MPC_SUBDIR = MPC
MPC_ARCHIVE = $(shell ls -1 MPC*.tar.gz 2>/dev/null || echo mpc-archive-missing)

MAN1 := debian/Basic_Logging_Service.1 \
	debian/Event_Logging_Service.1 \
	debian/Notify_Logging_Service.1 \
	debian/RTEvent_Logging_Service.1 \
	debian/TAO_ORB_Options.1
MAN5 :=

ifneq (mpc-archive-missing,$(MPC_ARCHIVE))
export MPC_ROOT = $(shell pwd)/$(MPC_SUBDIR)
endif
export ACE_ROOT = $(shell pwd)/$(ACE_SUBDIR)
export TAO_ROOT = $(ACE_ROOT)/TAO
export LD_LIBRARY_PATH := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib
export QTDIR=/usr/share/qt3

PKG_CONFIG_IN = $(shell find $(ACE_ROOT) -name '*.pc.in' 2>/dev/null)
PKG_CONFIG = $(PKG_CONFIG_IN:.in=)

# This dpatch is only a place holder. The `prepatch' targets stops
# here by default.
PREPATCH_MARK_DPATCH_NAME = 79-prepatch-dummy-mark.dpatch
UNTIL_DPATCH_NAME = $(PREPATCH_MARK_DPATCH_NAME)

# This patch contains the result of the update-makefile target. The
# idea is to speed up the build proccess using this patch instead
# of calling MakeProjectCreator.
MAKEFILE_DPATCH_NAME = 80-update-makefile
MAKEFILE_DPATCH_FILENAME = debian/patches/$(MAKEFILE_DPATCH_NAME).dpatch

# Used by `dpatch' target.
DPATCH_NAME = temp.dpatch
DPATCH_DESC = No description.

$(ACE_ROOT): $(ACE_ARCHIVE)
	tar -xzf "$^"
	touch "$@"

$(MPC_ROOT): $(MPC_ARCHIVE)
	tar -xzf "$^"
	touch "$@"

debian/%.1 debian/%.5: debian/%.sgml
	docbook-to-man "$^" > "$@"

%.pc: %.pc.in
	cat "$^" | sed -e 's#@prefix@#/usr#g' \
                       -e 's#@exec_prefix@#$$\{prefix\}#g' \
                       -e 's#@libdir@#$$\{exec_prefix\}/lib#g' \
                       -e 's#@includedir@#$$\{prefix\}/include#g' \
                       -e 's#@VERSION@#5.4.4#g' > "$@"

patch-perl-scripts: $(ACE_ROOT)
	for fn in `find "$(ACE_ROOT)" -name "*.pl"`; do (echo '#!/usr/bin/perl'; cat "$$fn") > "$${fn}T"; mv "$${fn}T" "$$fn"; chmod a+x "$$fn"; done

patch: patch-stamp
ifneq (mpc-archive-missing,$(MPC_ARCHIVE))
patch-stamp: patch-perl-scripts $(MPC_ROOT)
else
patch-stamp: patch-perl-scripts
endif
	dpatch apply-all
	touch $@

unpatch: clean $(ACE_ROOT)

$(ACE_ROOT)/debian.features: $(ACE_ROOT)
	cat debian/config/debian.features > "$@"
	echo "// Added by debian/rules based on \$$(DEB_BUILD_OPTIONS)" >> "$@"
ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
	echo "debug=1" > "$@"
	echo "optimize=0" >> "$@"
else
	echo "debug=0" >> "$@"
	echo "optimize=1" >> "$@"
endif

$(ACE_ROOT)/include/makeinclude/platform_macros.GNU: $(ACE_ROOT)/debian.features
	sed -e 's/^\/\//#/g' "$^" > "$@"
	echo >> "$@"
	echo "LINK.cc=override" >> "$@"
	echo "LINK.cc.override=\$$(PURELINK) \$$(PRELINK) \$$(CXX) \$$(CCFLAGS) \$$(CPPFLAGS) \$$(PTDIRS)" >> "$@"
	echo >> "$@"
	echo "include \$$(ACE_ROOT)/include/makeinclude/platform_linux.GNU" >> "$@"

# Prepare a ACE_wrappers directory where most of the patches are applied.
# We skip the $(MAKEFILE_DPATCH_NAME) dpatch because the intention is to
# create a new one. The fix-mpc-basedir.dpatch can not be applied too. If
# other the MakeProjectCreator tools won't work. To achieve that a dummy
# dpatch file is used: $(PREPATCH_MARK_DPATCH_NAME)
ifneq (mpc-archive-missing,$(MPC_ARCHIVE))
prepatch: $(ACE_ROOT) $(MPC_ROOT)
else
prepatch: $(ACE_ROOT)
endif
	dpatch apply-until $(UNTIL_DPATCH_NAME)
	$(MAKE) -f debian/rules $(ACE_ROOT)/debian.features
	rm -rf debian/patched

prepatchtwo: $(ACE_ROOT).orig
$(ACE_ROOT).orig:
	$(MAKE) -f debian/rules clean
	$(MAKE) -f debian/rules prepatch UNTIL_DPATCH_NAME=$(PREPATCH_MARK_DPATCH_NAME)
	mv "$(ACE_ROOT)" "$(ACE_ROOT).orig.tmp"
	$(MAKE) -f debian/rules prepatch UNTIL_DPATCH_NAME=$(PREPATCH_MARK_DPATCH_NAME)
	mv "$(ACE_ROOT).orig.tmp" "$(ACE_ROOT).orig"

dpatch:	$(ACE_ROOT).orig $(ACE_ROOT)
	diff -I "^# .*bin/mwc.pl.*-include.*-recurse.*" -Nru "$(ACE_SUBDIR).orig" "$(ACE_SUBDIR)" | dpatch patch-template -p "$(DPATCH_NAME)" "$(DPATCH_DESC)" > "$(DPATCH_NAME).dpatch"

# update-makefile is a special target dedicated for creation of a new
# dpatch after changing the debian/config/debian.feature file. Only
# projects which are required for distribution are compiled. Examples,
# tests and performance-tests are skipped. If you intent to compile them
# too refer to `update-makefile-complete' target below.
update-makefile: prepatchtwo
	cd $(ACE_ROOT) \
	&& dirs=`find * -type d -name "examples" -or -name "tests" -or -name "performance-tests" -or -name "doc*" | tr '\n' ','` \
	&& $(ACE_ROOT)/bin/mwc.pl -feature_file "$(ACE_ROOT)/debian.features" -recurse -relative ACE_ROOT=$(ACE_ROOT) -exclude $${dirs}TAO/TAOACE.mwc,TAO/CIAO/CIAOTAO.mwc
	$(MAKE) -f debian/rules dpatch DPATCH_NAME="$(MAKEFILE_DPATCH_NAME)" DPATCH_DESC="MakeProjectCreator generated Makefiles without examples and tests"
	mv "$(MAKEFILE_DPATCH_NAME).dpatch" "$(MAKEFILE_DPATCH_FILENAME)"

update-makefile-complete: prepatchtwo
	cd $(ACE_ROOT) && $(ACE_ROOT)/bin/mwc.pl -feature_file "$(ACE_ROOT)/debian.features" -recurse -relative ACE_ROOT=$(ACE_ROOT) -exclude TAO/TAOACE.mwc,TAO/CIAO/CIAOTAO.mwc
	$(MAKE) -f debian/rules dpatch DPATCH_NAME="$(MAKEFILE_DPATCH_NAME)" DPATCH_DESC="MakeProjectCreator generated Makefiles"
	mv "$(MAKEFILE_DPATCH_NAME).dpatch" "$(MAKEFILE_DPATCH_FILENAME)"

build: build-stamp build-pkgconfig build-manpages

build-manpages: $(MAN1) $(MAN5)

build-pkgconfig:
	$(MAKE) -f debian/rules $(PKG_CONFIG)

build-stamp: patch $(ACE_ROOT)/include/makeinclude/platform_macros.GNU
	dh_testdir

	cp debian/config/config.h $(ACE_ROOT)/ace

	$(MAKE) -C $(ACE_ROOT)/ace
	$(MAKE) -C $(ACE_ROOT)/ACEXML

	$(MAKE) -C $(ACE_ROOT)/apps/gperf/src
#	We need to rename gperf so that it does not conflict with the
#	existing Cygnus based gperf Debian package.
	cp $(ACE_ROOT)/bin/gperf $(ACE_ROOT)/bin/gperf-ace

	$(MAKE) -C $(ACE_ROOT)/Kokyu

	$(MAKE) -C $(TAO_ROOT)

#       Force PSS compilation.
	$(MAKE) -C $(TAO_ROOT)/orbsvcs/PSS dummy=1

	$(MAKE) -C $(TAO_ROOT)/CIAO

	touch "$@" 

clean:
	dh_testdir
	rm -rf *-stamp *-stampT *.tmp $(ACE_SUBDIR) $(ACE_SUBDIR).orig $(MPC_SUBDIR) $(MPC_SUBDIR).orig debian/patched $(MAN1) $(MAN5)

	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	sed -e 's/gperf/gperf-ace/g' \
            -e 's/GPERF/GPERF-ACE/g' \
           $(ACE_ROOT)/apps/gperf/gperf.1 > \
	   $(ACE_ROOT)/apps/gperf/gperf-ace.1
	sed -e 's/gperf\.info/gperf-ace\.info/g' \
            -e 's/(gperf)\.    /(gperf-ace)\./g' \
           $(ACE_ROOT)/apps/gperf/gperf.info > \
           $(ACE_ROOT)/apps/gperf/gperf-ace.info

#	Rename the $(TAO_ROOT)/utils README files
	cp $(TAO_ROOT)/utils/catior/README $(TAO_ROOT)/utils/catior/README.catior
	cp $(TAO_ROOT)/utils/nslist/README $(TAO_ROOT)/utils/nslist/README.nslist
	cp $(TAO_ROOT)/orbsvcs/Concurrency_Service/README $(TAO_ROOT)/orbsvcs/Concurrency_Service/README.Concurrency_Service
	cp $(TAO_ROOT)/orbsvcs/CosEvent_Service/README $(TAO_ROOT)/orbsvcs/CosEvent_Service/README.CosEvent_Service
	cp $(TAO_ROOT)/orbsvcs/FT_ReplicationManager/README $(TAO_ROOT)/orbsvcs/FT_ReplicationManager/README.FT_ReplicationManager
	cp $(TAO_ROOT)/orbsvcs/IFR_Service/README $(TAO_ROOT)/orbsvcs/IFR_Service/README.IFR_Service
	cp $(TAO_ROOT)/orbsvcs/LoadBalancer/README $(TAO_ROOT)/orbsvcs/LoadBalancer/README.LoadBalancer
	cp $(TAO_ROOT)/orbsvcs/Logging_Service/README $(TAO_ROOT)/orbsvcs/Logging_Service/README.Logging_Service
	cp $(TAO_ROOT)/orbsvcs/Naming_Service/README $(TAO_ROOT)/orbsvcs/Naming_Service/README.Naming_Service
	cp $(TAO_ROOT)/orbsvcs/Notify_Service/README $(TAO_ROOT)/orbsvcs/Notify_Service/README.Notify_Service
	cp $(TAO_ROOT)/orbsvcs/PSS/README $(TAO_ROOT)/orbsvcs/PSS/README.PSS
	cp $(TAO_ROOT)/orbsvcs/TAO_Service/README $(TAO_ROOT)/orbsvcs/TAO_Service/README.TAO_Service
	cp $(TAO_ROOT)/orbsvcs/Time_Service/README $(TAO_ROOT)/orbsvcs/Time_Service/README.Time_Service
	cp $(TAO_ROOT)/orbsvcs/Trading_Service/README $(TAO_ROOT)/orbsvcs/Trading_Service/README.Trading_Service
#	Rename the catior utility, it already exists in another package
	cp $(TAO_ROOT)/utils/catior/catior $(TAO_ROOT)/utils/catior/tao-catior

#	Rename tao_idl to have a script automatically define ACE_ROOT and
#	TAO_ROOT
	cp $(TAO_ROOT)/TAO_IDL/tao_idl $(TAO_ROOT)/TAO_IDL/tao_idl.real
	$(INSTALL) -m 755 -o root -g root -D debian/tao_idl debian/libtao-dev/usr/bin/tao_idl
	cp $(TAO_ROOT)/orbsvcs/IFR_Service/tao_ifr $(TAO_ROOT)/orbsvcs/IFR_Service/tao_ifr.real
	$(INSTALL) -m 755 -o root -g root -D debian/tao_ifr debian/libtao-orbsvcs1.4/usr/bin/tao_ifr

#	Be lintian clean, fix permissions on examples
	-chmod -x `find $(TAO_ROOT)/examples/ -perm 755 ! -type d -a ! \( -name "*.pl" -o -name "*.sh" \)`
	-chmod -x `find $(TAO_ROOT)/CIAO/examples/ -perm 755 ! -type d -a ! \( -name "*.pl" -o -name "*.sh" \)`
#	And on some header files
	-chmod -x `find $(TAO_ROOT)/orbsvcs -perm 755 ! -type d -a \( -name "*.h" -o -name "*.inl" -o -name "*.i" \)`

	dh_install --sourcedir=$(ACE_ROOT)

#	Fix duplicate files within reactor packages and main packages
	sh debian/remove_reactor_dups.sh

#	Install the C++ template sources.
	sh debian/copy_template_sources.sh

binary-indep: build install
	dh_testdir -i
	dh_testroot -i
	dh_installdocs -i
	dh_installexamples -i
	dh_installman -i
	dh_installchangelogs -i $(ACE_ROOT)/ChangeLog
	dh_link -i
	dh_compress -i -Xexamples -Xtutorials
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

binary-arch: build install
	dh_testdir -a
	dh_testroot -a
	dh_installdocs -a -A
	dh_installman -a
	dh_installinfo -pgperf-ace $(ACE_ROOT)/apps/gperf/gperf-ace.info
	dh_installchangelogs -a $(ACE_ROOT)/ChangeLog
	dh_installchangelogs -pgperf-ace $(ACE_ROOT)/apps/gperf/ChangeLog
	dh_strip -a
	dh_link -a
	dh_compress -a
	dh_fixperms -a
	dh_installdeb -a
	dh_makeshlibs -a -V
	dh_shlibdeps -a -l debian/tmp/usr/lib:debian/libacexml5.4/usr/lib:debian/libace-rmcast5.4/usr/lib:debian/libace-tmcast5.4/usr/lib:debian/libciao1.4/usr/lib:debian/libkokyu5.4/usr/lib:debian/libtao1.4/usr/lib:debian/libtao-orbsvcs1.4/usr/lib
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

source diff:
	@echo >&2 'source and diff are obsolete - use dpkg-source -b'; false

binary: binary-indep binary-arch

.PHONY: build build-manpages clean binary-indep binary-arch binary install patch unpatch prepatch prepatchtwo update-makefile update-makefile-complete patch-perl-scripts source diff
