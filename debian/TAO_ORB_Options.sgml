<!-- Manual converted from ACE_wrappers/TAO/docs/Options.html 1.182 2004/06/20 14:11:35 -->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
  <!ENTITY applname "TAO_ORB_Options">
  <!ENTITY revision "$Revision: 1.2 $">
  <!ENTITY man_tao_orb_options "<citerefentry><refentrytitle>TAO_ORB_Options</refentrytitle><manvolnum>1</manvolnum></citerefentry>">
  <!ENTITY man_event_service "<citerefentry><refentrytitle>Event_Service</refentrytitle><manvolnum>1</manvolnum></citerefentry>">
  <!ENTITY man_basic_logging_service "<citerefentry><refentrytitle>Basic_Logging_Service</refentrytitle><manvolnum>1</manvolnum></citerefentry>">
  <!ENTITY man_notify_logging_service "<citerefentry><refentrytitle>Notify_Logging_Service</refentrytitle><manvolnum>1</manvolnum></citerefentry>">
  <!ENTITY man_event_logging_service "<citerefentry><refentrytitle>Event_Logging_Service</refentrytitle><manvolnum>1</manvolnum></citerefentry>">
  <!ENTITY man_naming_service "<citerefentry><refentrytitle>Naming_Service</refentrytitle><manvolnum>1</manvolnum></citerefentry>">
  <!ENTITY Naming_Service "<application>Naming_Service</application>">
  <!ENTITY RTEvent_Logging_Service "<application>RTEvent_Logging_Service</application>">
  <!ENTITY seealso "&man_tao_orb_options;, &man_event_service;, &man_basic_logging_service;, &man_notify_logging_service;, &man_event_logging_service;, &man_naming_service;">
  <!ENTITY year "1999">
  <!ENTITY username "Douglas C. Schmidt">
  <!ENTITY useremail "<email>&lt;d.schmidt@vanderbilt.edu&gt;</email>">
]>
<refentry>
  <refmeta>
    <refentrytitle>TAO_ORB_OPTIONS</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>&applname;</refname>
    <refpurpose>Options for TAO Components</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>SYNOPSIS</title>
    <cmdsynopsis>
      <command>&progname;</command>
      <!-- From `Controlling Service Configurator Behaviour' -->
      <arg rep="repeat"><group><arg>-ORBSvcConf</arg><replaceable>filename</replaceable></group></arg>
      <group><arg>-ORBSvcConfDirective</arg><replaceable>directive</replaceable></group>


      <!-- From `Controlling Debugging Information' -->
      <arg>-ORBDebug</arg>
      <group><arg>-ORBDebugLevel</arg><replaceable>level</replaceable></group>
      <group><arg>-ORBVerboseLogging</arg>
	<group choice="req"><arg>0</arg><arg>1</arg><arg>2</arg></group>
      </group>
      <group><arg>-ORBLogFile</arg><replaceable>filename</replaceable></group>
      <group><arg>-ORBObjRefStyle</arg>
	<group choice="req"><arg>IOR</arg><arg>URL</arg></group>
      </group>

      <!-- From `Optimizing Request Processing' -->
      <group><arg>-ORBCDRTradeoff</arg>
	<replaceable>maxsize</replaceable></group>
      <group><arg>-ORBCollocation</arg>
	<group choice="req">
	  <arg>global</arg><arg>per-orb</arg><arg>no</arg></group>
      </group>
      <group><arg>-ORBCollocationStrategy</arg>
	<group choice="req">
	  <arg>thru_poa</arg><arg>direct</arg>
	</group>
      </group>
      <group><arg>-ORBNodelay</arg>
	<group choice="req"><arg>0</arg><arg>1</arg></group>
      </group>
      <group><arg>-ORBRcvSock</arg><replaceable>recv_size</replaceable></group>
      <group><arg>-ORBSndSock</arg><replaceable>snd_size</replaceable></group>
      <group><arg>-ORBStdProfileComponents</arg>
	<group choice="req"><arg>0</arg><arg>1</arg></group>
      </group>
      <group><arg>-ORBSingleReadOptimization</arg>
	<group choice="req"><arg>0</arg><arg>1</arg></group>
      </group>
      <group><arg>-ORBDisableRTCollocation</arg>
	<group choice="req"><arg>0</arg><arg>1</arg></group>
      </group>

      <!-- From `Connection Management and Protocol Selection' -->
      <group><arg>-ORBDefaultInitRef</arg>
	<replaceable>ior_prefix</replaceable>
      </group>
      <group><arg>-ORBDottedDecimalAddresses</arg>
	<group choice="req"><arg>0</arg><arg>1</arg></group>
      </group>
      <group><arg>-ORBEndpoint</arg>
	<replaceable>endpoint</replaceable>
      </group>
      <group><arg>-ORBListenEndpoints</arg>
	<replaceable>endpoints</replaceable>
      </group>
      <group><arg>-ORBImplRepoServicePort</arg>
	<replaceable>port</replaceable>
      </group>
      <group><arg>-ORBInitRef</arg>
	<replaceable>oid=ior</replaceable>
      </group>
      <group><arg>-ORBMulticastDiscoveryEndpoint</arg>
	<replaceable>endpoint</replaceable>
      </group>
      <group><arg>-ORBNameServicePort</arg>
	<replaceable>port</replaceable>
      </group>
      <group><arg>-ORBTradingServicePort</arg>
	<replaceable>port</replaceable>
      </group>
      <group><arg>-ORBUseIMR</arg>
	<group choice="req"><arg>0</arg><arg>1</arg></group>
      </group>

      <!-- From `Miscellaneous' -->
      <group><arg>-ORBId</arg>
	<replaceable>name</replaceable>
      </group>
      <group><arg>-ORBServerId</arg>
	<replaceable>id</replaceable>
      </group>
      <arg>-ORBDaemon</arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>INTRODUCTION</title>
    <para>
   TAO is a highly flexible ORB that contains a wide range of ORB
   configuration options. One or more of these options can be combined to
   meet various application requirements, such as low-latency,
   predictable real-time behavior, or small memory footprint. TAO's ORB
   configuration options are managed by an object-oriented framework
   within the ORB Core that contains the following types of entities:
      <itemizedlist mark="opencircle">
	    <listitem>
		  <para>
       Settings, which are options that can be assigned values differing
       from their default settings. Examples include setting the size of
       a Portable Object Adapter (POA)'s active object map or configuring
       the ORB to print debugging information as it processes requests. A
       few of these are run-time options, while a majority of them are
       compile-time options.
          </para>
		</listitem>
		<listitem>
		  <para>
       Resources, which are objects used internally by TAO, such as a
       reactor framework that demultiplexes new connection and data
       requests from a client or synchronization mechanisms used to
       regulate access to certain parts of the ORB.
	      </para>
		</listitem>
		<listitem>
		  <para>
       Strategies, which are objects that use the Resource entities to
       perform various ORB tasks, such as connection management,
       concurrency, and demultiplexing.
	      </para>
		</listitem>
		<listitem>
		  <para>
       Factories, which TAO uses to create and consolidate its many
       resources and strategies into a manageable number of factories
       that can be (re)configured into the ORB conveniently and
       consistently by ORB and application developers.
	      </para>
		</listitem>
	  </itemizedlist>
    </para>
	<para>
   The set of TAO ORB configuration options that are represented by the
   settings, resources, strategies, and factories can be specified via
   environment variables, service configuration files, and command-line
   arguments, as outlined below:
      <itemizedlist mark="opencircle">
	    <listitem>
		  <para>
       Environment variables are limited to specifying the interoperable
       object reference (IOR) and port number of TAO's Naming Service,
       Trading Service and Implementation Repository. They are limited in
       flexibility and don't provide the most important configuration
       hooks necessary to configure TAO for real-time and
       high-performance applications.
	      </para>
		</listitem>
	    <listitem>
		  <para>
	   Command-line options are passed to the ORB initialization factory
       method, CORBA::ORB_init(), by an application using the standard
       argc, argv tuple passed to the application's main(). Most of the
       options that can be exercised through environment variables can
       also be manipulated through command-line options. Command-line
       options override the environment variable settings if both are
       enabled.
          </para>
		</listitem>
	    <listitem>
		  <para>
       The Service Configurator is a framework that can be used to
       statically and dynamically configure components into middleware
       and applications. The information comprising the names of these
       components and their corresponding options are specified in a
       service configurator file, whose default file name is svc.conf.
       The service configurator is opened and processed by the ORB in
       CORBA::ORB_init(). The service configurator processing is done
       after all the command-line options have been parsed.
 	      </para>
		</listitem>
	  </itemizedlist>
    </para>
  </refsect1>
  <refsect1>
    <title>OPTIONS</title>
    <variablelist>
      <varlistentry>
	<term>-ORBSvcConf <replaceable>filename</replaceable></term>
	<listitem>
	  <para>
            Specifies the name of the file used to read service
            configuration directives via the Service Configurator
            framework. By default, a service configurator-based
            application will look for a file named
            <filename>svc.conf</filename> in the current directory.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBSvcConfDirective <replaceable>directive</replaceable></term>
	<listitem>
	  <para>
            Specifies a service configuration directive, which is
            passed to the Service Configurator. You can pass multiple
            of these options on the same command-line.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBDebug</term>
	<listitem>
	  <para>
            Instructs the ORB to print debugging messages from the
            service configurator framework. This option does not have
            a value but is used as a toggle to enable or disable
            debugging messages.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBDebugLevel <replaceable>level</replaceable></term>
	<listitem>
	  <para>
            Control the level of debugging in the ORB. Higher numbers
            generate more output (try 10). The default value of this
            option is 0.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBVerboseLogging {0 | 1 | 2}</term>
	<listitem>
	  <para>
            Controls the amount of status data printed on each line of
            the debug log. Higher numbers generate more output.  The
            default value of this option is 0.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBLogFile <replaceable>filename</replaceable></term>
	<listitem>
	  <para>
            <!-- TODO: use sth better than emphasis here ??? -->
            Causes all <emphasis>ACE_DEBUG</emphasis> and
            <emphasis>ACE_ERROR</emphasis> output to be redirected to
            the designated <replaceable>filename</replaceable>.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBObjRefStyle {IOR | URL}</term>
	<listitem>
	  <para>
            Specifies the user-visible style of object references. The
            IOR style (default) is the conventional CORBA object
            reference, whereas the URL style looks more like a URL.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBCDRTradeoff <replaceable>maxsize</replaceable></term>
	<listitem>
	  <para>
            Control the strategy to tradeoff between copy vs. no copy
            marshaling of octet sequences. If an octet sequence is
            smaller than <replaceable>maxsize</replaceable> (which
            defaults to
            <emphasis>ACE_DEFAULT_CDR_MEMORY_TRADEOFF</emphasis>) --
            and the current message block contains enough space for it
            -- the octet sequence is copied instead of appended to the
            CDR stream.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBCollocation {global | per-orb | no}</term>
	<listitem>
	  <para>
           Specifies the use of collocation object optimization. If
           <emphasis>global</emphasis> is specified (default), objects
           in the same process will be treated as collocated.  If
           <emphasis>per-orb</emphasis> is specified, only objects in
           the same ORB are treated as collocated. When
           <emphasis>no</emphasis> is specified, no objects are
           treated as collocated.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBCollocationStrategy {thru_poa | direct}</term>
	<listitem>
	  <para>
            Specifies what type of collocated object to use. If the
            <emphasis>thru_poa</emphasis> (default) strategy is used,
            TAO uses the collocation object implementation that
            respects POA's current state and policies. When using the
            <emphasis>direct</emphasis> strategy, method invocations
            on collocated objects become direct calls to servant
            without checking POA's status, which can increase
            performance. If you use the 
            <emphasis>direct</emphasis> strategy, your interfaces must 
            be compiled with the <emphasis>-Gd</emphasis> IDL compiler option.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBNodelay {0 | 1}</term>
	<listitem>
	  <para>
            Enable or disable the <emphasis>TCP_NODELAY</emphasis> option 
            (Nagle's algorithm). By default, 
            <emphasis>TCP_NODELAY</emphasis> is enabled.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBRcvSock <replaceable>recv_size</replaceable></term>
	<listitem>
	  <para>
            Specify the size of the socket receive buffer as a
            positive, non-zero integer. If not specified, the
            <emphasis>ACE_DEFAULT_MAX_SOCKET_BUFSIZ</emphasis> default
            is used.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBSndSock <replaceable>snd_size</replaceable></term>
	<listitem>
	  <para>
            Specify the size of the socket send buffer as a positive,
            non-zero integer. If not specified, the
            <emphasis>ACE_DEFAULT_MAX_SOCKET_BUFSIZ</emphasis> default
            is used.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBStdProfileComponents {0 | 1}</term>
	<listitem>
	  <para>
            If <emphasis>0</emphasis> then the ORB does not generate
            the OMG standardized profile components, such as the ORB
            type and code sets. Notice that the presence of this
            components is optional in GIOP 1.1 The default value is
            controlled by a compile-time flag (check
            <filename>orbconf.h</filename>).
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBSingleReadOptimization {0 | 1}</term>
	<listitem>
	  <para>
            This option controls whether TAO's ``single read
            optimization'' is used when receiving requests. If this
            option is disabled (<emphasis>0</emphasis>), the ORB will
            do two reads to read a request: one reads the request
            header and the other reads the request payload. If this
            option is enabled (<emphasis>1</emphasis>), the ORB will
            do a read of size <emphasis>TAO_MAXBUFSIZE</emphasis>,
            hoping to read the entire request.  If more than one
            request is read they will be queued up for processing
            later.
          </para>
          <para>
            This option defaults to <emphasis>1</emphasis> because it
            can provide better performance. However, in the case of
            RT-CORBA, this option should be set to
            <emphasis>0</emphasis>. Consider the following scenario:
            <itemizedlist>
	      <listitem>
		<para>two requests are read from one socket,</para>
	      </listitem>
	      <listitem>
		<para>the additional request is queued, and</para>
	      </listitem>
	      <listitem>
		<para>the ORB uses its Reactor's notification
            mechanism to wake up the follower threads. </para>
	      </listitem>
	    </itemizedlist>
          </para>
		</listitem>
		<listitem>
		  <para><emphasis>-ORBStdProfileComponents</emphasis> boolean (0|1)</para>
		  <para>
   If 0 then the ORB does not
   generate the OMG standardized profile components, such as the ORB type
   and code sets. Notice that the presence of this components is optional
   in GIOP 1.1 The default value is controlled by a compile-time flag
   (check <filename>orbconf.h</filename>).
          </para>
	</listitem>	
      </varlistentry>
      <varlistentry>
	<term>-ORBDisableRTCollocation {0 | 1}</term>
	<listitem>
	  <para>
            This option controls whether the application wants to use
            or discard RT collocation decisions made by the RT ORB. A
            value of <emphasis>1</emphasis> disables RT collocation
            decisions and falls back on the default collocation
            decisions implemented in the default ORB. This is very
            useful for applications using the RT ORB and doesn't want
            to use the RT collocation decisions but fallback on the
            default decisions for better performance. The default
            value is <emphasis>0</emphasis>.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBDefaultInitRef <replaceable>ior_prefix</replaceable></term>
	<listitem>
	  <para>
            This argument allows resolution of initial references not
            explicitly specified with
            <emphasis>-ORBInitRef</emphasis>. It requires a URL prefix
            that, after appending a slash `/' (`|' for the UIOP
            pluggable protocol) and a simple object key, forms a new
            URL to identify an initial object reference. The URL
            prefix format currently supported is based on the standard
            corbaloc mechanism in the CORBA Interoperable Naming
            Service.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBDottedDecimalAddresses {0 | 1}</term>
	<listitem>
	  <para>
            Use the dotted decimal notation for addresses. This option
            can be used to workaround broken DNS implementations and
            may also reduce the time spent resolving IP addresses. By
            default, this option is disabled (<emphasis>0</emphasis>)
            since domain names are the standard address notation for
            IORs.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBEndpoint <replaceable>endpoint</replaceable></term>
	<listitem>
	  <para>
            This option is similar to the
            <emphasis>-ORBListenEndPoints</emphasis> option described
            below. This option will be deprecated in later versions on
            TAO since the CORBA specification now defines the
            <emphasis>-ORBListenEndpoints</emphasis> option instead.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>-ORBListenEndpoints <replaceable>endpoint</replaceable></term>
	<listitem>
	  <para>
   Options in this category don't control the behavior of the ORB in
   terms of resouces or strategies. Instead, they are helper options
   provided for specific application requirements.
      <itemizedlist mark="opencircle">
	    <listitem>
		  <para><emphasis>-ORBId</emphasis> orb_name</para>
		  <para>
   This option allows the name of an ORB to be set to
   orb_name. The ORBId will be passed to the ORB_init() method to
   differentiate coexisting ORBs (when there are more than one ORBs).
          </para>
		</listitem>
		<listitem>
		  <para><emphasis>-ORBServerId</emphasis> server_id</para>
		  <para>
   This option allows setting a name/id to a
   server to uniquely identify a server to TAO's Implementation
   Repository.
          </para>
		</listitem>
		<listitem>
		  <para><emphasis>-ORBDaemon</emphasis></para>
		  <para>
   Specifies that the ORB should daemonize itself, i.e., run
   as a background process. This option is only meaningful on OS
   platforms that support daemonization.</para>
		</listitem>
	  </itemizedlist>
	  </para>
    </refsect3>
	</refsect2>
	<refsect2>
	  <title>The Service Configurator File</title>
	  <para>
            Sets of endpoints may be specified using multiple
            <emphasis>-ORBEndpoint</emphasis> options or by delimiting
            endpoints with a semi-colon (`;'). For example, 

            <filename>-ORBEndpoint iiop://localhost:9999 -ORBEndpoint uiop:///tmp/mylocalsock -ORBEndpoint shmiop://10002</filename>

            is equivalent to:

            <filename>-ORBEndpoint 'iiop://localhost:9999;uiop:///tmp/mylocalsock;shmiop://10002'</filename>

            Notice the single quotes (') in the latter option
            specification. Single quotes are needed to prevent the
            shell from interpreting text after the semi-colon as
            another command to run.

            If an endpoint is specified without an addr such as the
            following:

            -ORBEndpoint uiop:// -ORBEndpoint shmiop:// 

            then a default endpoint will be created for the specified
            protocol.
          </para>
	</listitem>	
      </varlistentry>
      <varlistentry>
	<term>-ORBImplRepoServicePort <replaceable>port</replaceable></term>
	<listitem>
	  <para>
            Specifies which port the Implementation Repository is
            listening on for multicast requests. By default, the
            <emphasis>TAO_DEFAULT_IMPLREPO_SERVER_REQUEST_PORT</emphasis> (10018) is used.
          </para>
		  <para>
   <emphasis>MT</emphasis> means use the multi-threaded client connection handler which uses
   the leader follower model. This model allows the use of multiple
   threads with a single Reactor.
		  </para>
		  <para>
   <emphasis>RW</emphasis> selects a strategy that simply blocks in recv() when waiting for a
   response from the server instead of waiting in the Reactor. The RW
   strategy only works when the application does not have to worry about
   new request showing up when waiting for a response. Further, this
   strategy cannot be used with Asynchronous Method Invocation (AMI)
   calls. Therefore, this strategy is appropriate only for "pure"
   synchronous clients. Note that applications with nested upcalls are
   not "pure" synchronous clients. Also note that this strategy will only
   effect two way calls, since there is no waiting for one way calls.
   This strategy can also be used in an application that is both a client
   and a server if the server side is handled by a separate thread and
   the client threads are "pure" clients.
		  </para>
		  <para>
   Default for this option is MT.
		  </para>
		</listitem>
		<listitem>
		  <para><emphasis>-ORBTransportMuxStrategy</emphasis> EXCLUSIVE | MUXED</para>
		  <para>
   <emphasis>EXCLUSIVE</emphasis> means that the
   Transport does not multiplex requests on a connection. At a time,
   there can be only one request pending on a connection.
		  </para>
		  <para>
   <emphasis>MUXED</emphasis> means that Transport multiplexes more than one request at the
   same time on a connection. This option is often used in conjunction
   with AMI, because multiple requests can be sent "in bulk."
		  </para>
		  <para>
   Default for this option is MUXED.
		  </para>
		</listitem>
		<listitem>
		  <para><emphasis>-ORBConnectStrategy</emphasis> type</para>
		  <para>
   TAO provides three strategies to connect to
   remote servers. The default leader_follower strategy uses the Reactor
   and non-blocking connects to connect and this strategy participates in
   the Leader/Followers protocol to synchronize access to the Reactor.
   The reactive strategy uses the Reactor for non-blocking connects but
   does not take part in the Leader/Followers protocol, thus it is better
   used only in single threaded applications. Finally, the blocked
   strategy as the name implies, blocks the thread until connection is
   complete. Some of the protocols in TAO (such as SHMIOP and SSLIOP) can
   only use the blocked strategy.
		  </para>
		</listitem>
	  </itemizedlist>
	</refsect2>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para>&seealso;</para>
  </refsect1>
  <refsect1>
    <title>AUTHOR</title>
    <para>&username; &useremail;</para>
  </refsect1>
</refentry>
