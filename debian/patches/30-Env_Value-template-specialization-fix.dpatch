#! /bin/sh /usr/share/dpatch/dpatch-run
## 30-Env_Value-template-specialization-fix.dpatch by Thomas Girard <thomas.g.girard@free.fr>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Backport `Wed Mar  1 09:48:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>'
## DP: Fix template specializations for Env_Value.

@DPATCH@

--- ACE_wrappers/ace/Env_Value_T.h-
+++ ACE_wrappers/ace/Env_Value_T.h
@@ -86,72 +86,71 @@
 #endif /* ACE_TEMPLATES_REQUIRE_SOURCE */
 
 
-// Default calls a CTOR on type T of the form 'T::T(const char*)', but
-// users can feel free to create their own specialized conversion
-// functions if necessary, as shown below.  Note that for 'char*' the
-// default is used because a simple cast will be performed and no
-// conversion will be necessary.
-
-template <class T> inline void
-ACE_Convert (const ACE_TCHAR *s, T &t)
-{
-  t = T (s);
-}
-
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, ACE_TCHAR *&v)
 {
   v = (ACE_TCHAR *) s;
 }
 
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, const ACE_TCHAR *&v)
 {
   v = (const ACE_TCHAR *) s;
 }
 
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, short &si)
 {
   si = static_cast<short> (ACE_OS::strtol (s, 0, 10));
 }
 
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, u_short &us)
 {
   us = static_cast <u_short> (ACE_OS::strtol (s, 0, 10));
 }
 
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, u_int &i)
 {
   i = static_cast<u_int> (ACE_OS::strtol (s, 0, 10));
 }
 
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, long &l)
 {
   l = ACE_OS::strtol (s, 0, 10);
 }
 
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, int &i)
 {
   i = static_cast<int> (ACE_OS::strtol (s, 0, 10));
 }
 
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, u_long &ul)
 {
   ul = ACE_OS::strtoul (s, 0, 10);
 }
 
-inline void
+template <> inline void
 ACE_Convert (const ACE_TCHAR *s, double &d)
 {
   d = ACE_OS::strtod (s, 0);
 }
 
+// Default calls a CTOR on type T of the form 'T::T(const char*)', but
+// users can feel free to create their own specialized conversion
+// functions if necessary, as shown above.  Note that for 'char*' the
+// default is used because a simple cast will be performed and no
+// conversion will be necessary.
+template <class T> inline void
+ACE_Convert (const ACE_TCHAR *s, T &t)
+{
+  t = T (s);
+}
+
 #if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
 #pragma implementation ("Env_Value_T.cpp")
 #endif /* ACE_TEMPLATES_REQUIRE_PRAGMA */
