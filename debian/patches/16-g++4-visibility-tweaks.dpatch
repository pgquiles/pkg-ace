#! /bin/sh /usr/share/dpatch/dpatch-run
## 16-g++4-visibility-tweaks.dpatch by Thomas Girard <thomas.g.girard@free.fr>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Tweaks for the visibility feature of g++4, and fix for singleton
## DP: breakage with template instantiations.

@DPATCH@

--- ACE_wrappers/include/makeinclude/platform_g++_common.GNU-
+++ ACE_wrappers/include/makeinclude/platform_g++_common.GNU
@@ -129,7 +129,11 @@
     # Take advantage of G++ (>= 4.x) visibility attributes to generate
     # improved shared library binaries.
     ifeq ($(GXX_4_OR_BETTER), 1)
-      CCFLAGS += -fvisibility=hidden -fvisibility-inlines-hidden
+      ifneq ($(no_hidden_visibility),1)
+        CCFLAGS += -fvisibility=hidden -fvisibility-inlines-hidden
+      else
+        CPPFLAGS += -DACE_HAS_CUSTOM_EXPORT_MACROS=0
+      endif # no_hidden_visibility
     endif # GXX_4_OR_BETTER == 1
   endif # static_libs_only
 endif # shared_libs
--- ACE_wrappers/ace/config-g++-common.h-
+++ ACE_wrappers/ace/config-g++-common.h
@@ -69,13 +69,42 @@
 // Take advantage of G++ (>= 4.x) visibility attributes to generate
 // improved shared library binaries.
 #if (__GNUC__ > 3)
-# define ACE_HAS_CUSTOM_EXPORT_MACROS
-# define ACE_Proper_Export_Flag __attribute__ ((visibility("default")))
-# define ACE_Proper_Import_Flag
-# define ACE_EXPORT_SINGLETON_DECLARATION(T)
-# define ACE_EXPORT_SINGLETON_DECLARE(SINGLETON_TYPE, CLASS, LOCK)
-#define ACE_IMPORT_SINGLETON_DECLARATION(T)
-#define ACE_IMPORT_SINGLETON_DECLARE(SINGLETON_TYPE, CLASS, LOCK)
+
+# if defined (ACE_HAS_CUSTOM_EXPORT_MACROS) && ACE_HAS_CUSTOM_EXPORT_MACROS == 0
+#  undef ACE_HAS_CUSTOM_EXPORT_MACROS
+# else
+#  ifndef ACE_HAS_CUSTOM_EXPORT_MACROS
+#    define ACE_HAS_CUSTOM_EXPORT_MACROS
+#  endif  /* !ACE_HAS_CUSTOM_EXPORT_MACROS */
+#  define ACE_Proper_Export_Flag __attribute__ ((visibility("default")))
+#  define ACE_Proper_Import_Flag
+
+// Sadly, G++ 4.x silently ignores visibility attributes on
+// template instantiations, which breaks singletons.
+// As a workaround, we use the GCC visibility pragmas.
+// And to make them fit in a macro, we use C99's _Pragma()
+// http://gcc.gnu.org/bugzilla/show_bug.cgi?id=17470
+#  if 0 /* ... replace if/when gcc bug 17470 is fixed */
+#   define ACE_EXPORT_SINGLETON_DECLARATION(T) template class ACE_Proper_Export_Flag T
+#   define ACE_EXPORT_SINGLETON_DECLARE(SINGLETON_TYPE, CLASS, LOCK) template class ACE_Proper_Export_Flag SINGLETON_TYPE <CLASS, LOCK>;
+#  else  /* ! GCC_HAS_TEMPLATE_INSTANTIATION_VISIBILITY_ATTRS */
+#   define ACE_EXPORT_SINGLETON_DECLARATION(T)     \
+        _Pragma ("GCC visibility push(default)")  \
+        template class T                          \
+        _Pragma ("GCC visibility pop")
+#   define ACE_EXPORT_SINGLETON_DECLARE(SINGLETON_TYPE, CLASS, LOCK) \
+        _Pragma ("GCC visibility push(default)")                    \
+        template class SINGLETON_TYPE<CLASS, LOCK>;                 \
+        _Pragma ("GCC visibility pop")
+#  endif /* ! GCC_HAS_TEMPLATE_INSTANTIATION_VISIBILITY_ATTRS */
+
+// Note that the "__extension__" is needed to prevent g++ from issuing
+// an error when using its "-pedantic" command line flag.
+#  define ACE_IMPORT_SINGLETON_DECLARATION(T) __extension__ extern template class T
+#  define ACE_IMPORT_SINGLETON_DECLARE(SINGLETON_TYPE, CLASS, LOCK) __extension__ extern template class SINGLETON_TYPE<CLASS, LOCK>;
+
+
+# endif  /* ACE_HAS_CUSTOM_EXPORT_MACROS == 0 */
 #endif  /* __GNU__ > 3 */
 
 #if defined (ACE_HAS_GNU_REPO)
